-- Druha a treti cast projektu do predmetu IDS 2023/24
-- -> SQL skript pro vytvoreni zakladnich objektu databaze
-- -> SQL skript s dotazy SELECT
-- -> SQL skript obsahujici triggery, procedury a meterializovany pohled
-- -> Autori:
--      -> Tomas Daniel (xdanie14)
--      -> Jakub Jansta (xjanst02)

-------------------------- DROP Tables ---------------------------

-- Smazani pripadnych starych tabulek pred vytvorenim tabulek prazdnych
DROP TABLE ZachyceneStopy;
DROP TABLE StopyZachytnutelneDetektory;
DROP TABLE Detektory;
DROP TABLE StopyKouzelnychPredmetu;
DROP TABLE TypyStop;
DROP TABLE Vlastnictvi;
DROP TABLE KouzelnePredmety;
DROP TABLE MudlovskePredmety;
DROP TABLE Predmety;
DROP TABLE Kouzelnici;
DROP MATERIALIZED VIEW zachycene_stopy_avg_jupiter;

------------------------------------------------------------------

------------------------- CREATE Tables --------------------------

CREATE TABLE Kouzelnici
(
    runoveJmeno       NVARCHAR2(255) PRIMARY KEY,
    obcanskeJmeno     NVARCHAR2(255) NOT NULL,
    kouzelnickaUroven INT            NOT NULL CHECK (kouzelnickaUroven BETWEEN 0 AND 211),
    ulice             NVARCHAR2(255) NOT NULL,
    mesto             NVARCHAR2(255) NOT NULL,
    psc               INT            NOT NULL CHECK (psc > 0),
    cisloDomu         INT            NOT NULL CHECK (cisloDomu > 0)
);
-- Pro reprezentaci generalizace/specializace jsme zvolili pristup s jednou tabulkou pro nadtyp (Predmety)
-- a dvemi tabulkami pro podtypy (MudlovskePredmety, KouzelnePredmety) s primarnim klicem nadtypu
CREATE TABLE Predmety
(
    runovyKod INT            GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    nazev     NVARCHAR2(255) NOT NULL
);

CREATE TABLE MudlovskePredmety
(
    runovyKod INT            REFERENCES Predmety(runovyKod) ON DELETE CASCADE PRIMARY KEY,
    vyrobce   NVARCHAR2(255) NOT NULL,
    cena      DECIMAL(10, 2) CHECK (cena >= 0)
);

CREATE TABLE KouzelnePredmety
(
    runovyKod    INT            REFERENCES Predmety(runovyKod) ON DELETE CASCADE PRIMARY KEY,
    velikost     INT            NOT NULL CHECK (velikost > 0),
    nebezpecnost INT            NOT NULL CHECK (nebezpecnost BETWEEN 0 AND 10),
    typ          NVARCHAR2(255) NOT NULL
);

CREATE TABLE Vlastnictvi
(
    idVlastnictvi         INT            GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    zpusobZiskani         NVARCHAR2(255) NOT NULL,
    -- Muze byt NULL = konkretni vlastnictvi je porad platne
    zpusobZtraty          NVARCHAR2(255),
    runovyKodPredmetu     INT            REFERENCES Predmety(runovyKod),
    runoveJmenoKouzelnika NVARCHAR2(255) REFERENCES Kouzelnici(runoveJmeno)
);

CREATE TABLE TypyStop
(
    idTypu INT            GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    typ    NVARCHAR2(255) NOT NULL
);

CREATE TABLE StopyKouzelnychPredmetu
(
    runovyKod INT REFERENCES Predmety(runovyKod),
    idTypu    INT REFERENCES TypyStop(idTypu),
    PRIMARY KEY(runovyKod, idTypu)
);

CREATE TABLE Detektory
(
    idDetektoru INT            GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    stav        NVARCHAR2(255) NOT NULL,
    -- Cistlivost vyjadrena stupnici 0% - 100%
    citlivost   INT            NOT NULL CHECK (citlivost BETWEEN 0 AND 100)
);

CREATE TABLE StopyZachytnutelneDetektory
(
    idDetektoru INT REFERENCES Detektory(idDetektoru),
    idTypu      INT REFERENCES TypyStop(idTypu),
    PRIMARY KEY(idDetektoru, idTypu)
);

CREATE TABLE ZachyceneStopy
(
    idZachyceni           INT            GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
    poziceSaturnu         INT            NOT NULL CHECK (poziceSaturnu BETWEEN 1 AND 365),
    poziceJupiteru        INT            NOT NULL CHECK (poziceJupiteru BETWEEN 1 AND 365),
    pocetObehuJupiteru    INT            NOT NULL CHECK (pocetObehuJupiteru > 0),
    mesicniFaze           NVARCHAR2(255) NOT NULL CHECK (mesicniFaze in ('nov', 'prvni ctvrt', 'uplnek', 'posledni ctvrt')),
    runoveJmenoKouzelnika NVARCHAR2(255) REFERENCES Kouzelnici(runoveJmeno),
    idDetektoru           INT            REFERENCES Detektory (idDetektoru),
    -- Kontrola, aby stopa mela alespon jednu entitu, ktera ji zachytila
    CONSTRAINT byl_nekym_zachycen_check
        CHECK (runoveJmenoKouzelnika IS NOT NULL OR idDetektoru IS NOT NULL),

    idTypu               INT            REFERENCES TypyStop(idTypu),
    runovyKodPredmetu    INT            REFERENCES Predmety(runovyKod)
);

------------------------------------------------------------------

---------------------------- TRIGGERS ----------------------------
-- Trigger pro pripad, kdy je zachycena stopa nekym vlastneneho predmetu, tedy je pouzit
-- Vypis obsahuje runovy kod dotycneho predmetu, runove jmeno majitele predmetu a cas vlozeni do databaze
CREATE OR REPLACE TRIGGER log_zachycene_stopy
    AFTER INSERT ON ZachyceneStopy
    FOR EACH ROW
BEGIN
    IF :NEW.runoveJmenoKouzelnika IS NOT NULL THEN
        DBMS_OUTPUT.PUT_LINE(
            'ID zachyceni: ' || :NEW.idZachyceni ||
            ', runove jmeno kouzelnika: ' || :NEW.runoveJmenoKouzelnika ||
            ', runovy kod predmetu: ' || :NEW.runovyKodPredmetu ||
            ', cas: ' || TO_CHAR(SYSTIMESTAMP, 'DD-MON-YYYY HH24:MI:SS')
        );
    END IF;
END;
/

-- Trigger pro pripad, kdy je zachycena stopa predmetu s vysokou nebezpecnosti
-- Vypis obsahuje runovy kod dotycneho predmetu a jeho nebezpecnost
CREATE OR REPLACE TRIGGER log_pouziti_nebezpecneho_predmetu
    AFTER INSERT ON ZachyceneStopy
    FOR EACH ROW
DECLARE
    nebezpecnost_pouziteho_predmetu INT;
BEGIN
    SELECT nebezpecnost
    INTO nebezpecnost_pouziteho_predmetu
    FROM KouzelnePredmety
    WHERE runovyKod = :NEW.runovyKodPredmetu;

    IF nebezpecnost_pouziteho_predmetu = 10 THEN
        DBMS_OUTPUT.PUT_LINE('Pouziti predmetu s runovym kodem "' || :NEW.runovyKodPredmetu || '" s nejvyssi nebezpecnosti zachyceno!!!');
    ELSIF nebezpecnost_pouziteho_predmetu > 7 THEN
        DBMS_OUTPUT.PUT_LINE('Pouziti nebezpecneho predmetu s runovym kodem "' || :NEW.runovyKodPredmetu || '" se zvysenou nebezpecnosti "' || nebezpecnost_pouziteho_predmetu || '" zachyceno.');
    END IF;
EXCEPTION
    -- Ignorovan pro pripad, kdy SELECT nenasel zadny predmet
    WHEN OTHERS THEN
        NULL;
END;
/

------------------------------------------------------------------

-------------------------- FILL Tables ---------------------------

INSERT INTO Kouzelnici (runoveJmeno, obcanskeJmeno, kouzelnickaUroven, ulice                , mesto , psc, cisloDomu)
    VALUES             ('Merlin'   , 'Pavel Novak', 99               , 'Hollywood Boulevare', 'Brno', 123, 1);
INSERT INTO Kouzelnici (runoveJmeno, obcanskeJmeno, kouzelnickaUroven, ulice       , mesto     , psc, cisloDomu)
    VALUES             ('Gandalf'  , 'Pepa Soucek', 121              , 'China town', 'New York', 41 , 76);
INSERT INTO Kouzelnici (runoveJmeno, obcanskeJmeno  , kouzelnickaUroven, ulice        , mesto     , psc, cisloDomu)
    VALUES             ('One Eye'  , 'Karel Pokorny', 60               , 'Bozetechova', 'Brno'    , 10 , 11);

INSERT INTO Predmety (nazev)
    VALUES           ('Magic sword');
INSERT INTO Predmety (nazev)
    VALUES           ('Potion of healing');
INSERT INTO Predmety (nazev)
    VALUES           ('Invisibility shield');
INSERT INTO Predmety (nazev)
    VALUES           ('Potion of death');
INSERT INTO Predmety (nazev)
    VALUES           ('Magic shoes');
INSERT INTO Predmety (nazev)
    VALUES           ('Stick of death');
-- Vlozeni dat do dedici tabulky
INSERT INTO MudlovskePredmety (runovyKod, vyrobce     , cena)
    VALUES                    (1        , 'Smithy Co.', 50.00);
INSERT INTO KouzelnePredmety (runovyKod, velikost, nebezpecnost, typ)
    VALUES                   (2        , 10      , 5           , 'Fireball scroll');
INSERT INTO MudlovskePredmety (runovyKod, vyrobce             , cena)
    VALUES                    (3        , 'Zbrojovka Brno Co.', 450.00);
INSERT INTO KouzelnePredmety (runovyKod, velikost, nebezpecnost, typ)
    VALUES                   (4        , 4       , 9           , 'Coconut smell');
INSERT INTO MudlovskePredmety (runovyKod, vyrobce, cena)
    VALUES                    (5        , 'Bata' , 54.90);
INSERT INTO KouzelnePredmety (runovyKod, velikost, nebezpecnost, typ)
    VALUES                   (6        , 10      , 10          , 'Stick of death');

INSERT INTO Vlastnictvi (zpusobZiskani       , runovyKodPredmetu, runoveJmenoKouzelnika)
    VALUES              ('Found in a dungeon', 1                , 'Merlin');
INSERT INTO Vlastnictvi (zpusobZiskani              , zpusobZtraty        , runovyKodPredmetu, runoveJmenoKouzelnika)
    VALUES              ('Purchased from a merchant', 'Lost during battle', 2                , 'Gandalf');
INSERT INTO Vlastnictvi (zpusobZiskani         , runovyKodPredmetu, runoveJmenoKouzelnika)
    VALUES              ('Found on battlefield', 3                , 'One Eye');
INSERT INTO Vlastnictvi (zpusobZiskani, runovyKodPredmetu, runoveJmenoKouzelnika)
    VALUES              ('Not known'  , 4                , 'One Eye');
INSERT INTO Vlastnictvi (zpusobZiskani     , runovyKodPredmetu, runoveJmenoKouzelnika)
    VALUES              ('Given by strange', 5                , 'One Eye');

INSERT INTO TypyStop (typ)
    VALUES           ('Deadly smell');
INSERT INTO TypyStop (typ)
    VALUES           ('Radiation');
-- Vlozeni dat do spojovaci tabulky
INSERT INTO StopyKouzelnychPredmetu (runovyKod, idTypu)
    VALUES                          (1        , 1);
INSERT INTO StopyKouzelnychPredmetu (runovyKod, idTypu)
    VALUES                          (2        , 2);

INSERT INTO Detektory (idDetektoru, stav    , citlivost)
    VALUES            (5          , 'Active', 80);
INSERT INTO Detektory (idDetektoru, stav      , citlivost)
    VALUES            (6          , 'Poisoned', 10);
-- Vlozeni dat do spojovaci tabulky
INSERT INTO StopyZachytnutelneDetektory (idDetektoru, idTypu)
    VALUES                              (5          , 1);
INSERT INTO StopyZachytnutelneDetektory (idDetektoru, idTypu)
    VALUES                              (6          , 2);

INSERT INTO ZachyceneStopy (poziceSaturnu, poziceJupiteru, pocetObehuJupiteru, mesicniFaze, runoveJmenoKouzelnika, idDetektoru, idTypu, runovyKodPredmetu)
    VALUES                 (150          , 200           , 3                 , 'uplnek'   , 'Merlin'             , NULL       , 1     , 1);

INSERT INTO ZachyceneStopy (poziceSaturnu, poziceJupiteru, pocetObehuJupiteru, mesicniFaze, runoveJmenoKouzelnika, idDetektoru, idTypu, runovyKodPredmetu)
    VALUES                 (250          , 300           , 5                 , 'nov'      , NULL                 , 5          , 2     , 2);

INSERT INTO ZachyceneStopy (poziceSaturnu, poziceJupiteru, pocetObehuJupiteru, mesicniFaze, runoveJmenoKouzelnika, idDetektoru, idTypu, runovyKodPredmetu)
    VALUES                 (250          , 300           , 5                 , 'nov'      , NULL                 , 5          , 2     , 6);

INSERT INTO ZachyceneStopy (poziceSaturnu, poziceJupiteru, pocetObehuJupiteru, mesicniFaze, runoveJmenoKouzelnika, idDetektoru, idTypu, runovyKodPredmetu)
    VALUES                 (250          , 300           , 5                 , 'nov'      , NULL                 , 5          , 2     , 2);

INSERT INTO ZachyceneStopy (poziceSaturnu, poziceJupiteru, pocetObehuJupiteru, mesicniFaze, runoveJmenoKouzelnika, idDetektoru, idTypu, runovyKodPredmetu)
    VALUES                 (250          , 300           , 5                 , 'nov'      , NULL                 , 5          , 2     , 6);

INSERT INTO ZachyceneStopy (poziceSaturnu, poziceJupiteru, pocetObehuJupiteru, mesicniFaze, runoveJmenoKouzelnika, idDetektoru, idTypu, runovyKodPredmetu)
    VALUES                 (250          , 300           , 5                 , 'nov'      , NULL                 , 5          , 2     , 1);

INSERT INTO ZachyceneStopy (poziceSaturnu, poziceJupiteru, pocetObehuJupiteru, mesicniFaze, runoveJmenoKouzelnika, idDetektoru, idTypu, runovyKodPredmetu)
    VALUES                 (250          , 300           , 5                 , 'nov'      , NULL                 , 6          , 2     , 2);

INSERT INTO ZachyceneStopy (poziceSaturnu, poziceJupiteru, pocetObehuJupiteru, mesicniFaze, runoveJmenoKouzelnika, idDetektoru, idTypu, runovyKodPredmetu)
    VALUES                 (250          , 300           , 5                 , 'nov'      , NULL                 , 6          , 2     , 2);

INSERT INTO ZachyceneStopy (poziceSaturnu, poziceJupiteru, pocetObehuJupiteru, mesicniFaze, runoveJmenoKouzelnika, idDetektoru, idTypu, runovyKodPredmetu)
    VALUES                 (250          , 300           , 5                 , 'nov'      , NULL                 , 6          , 2     , 2);

INSERT INTO ZachyceneStopy (poziceSaturnu, poziceJupiteru, pocetObehuJupiteru, mesicniFaze, runoveJmenoKouzelnika, idDetektoru, idTypu, runovyKodPredmetu)
    VALUES                 (250          , 300           , 5                 , 'nov'      , NULL                 , 6          , 2     , 4);

------------------------------------------------------------------

------------------------ SELECT Commands -------------------------
-- Spojeni 2 tabulek:
-- Jake typy stop zanechaly kouzelne predmety s nejvyssi nebezpecnosti?
SELECT KouzelnePredmety.typ
FROM KouzelnePredmety
JOIN ZachyceneStopy ON KouzelnePredmety.runovyKod = ZachyceneStopy.runovyKodPredmetu
WHERE KouzelnePredmety.nebezpecnost = 10
GROUP BY KouzelnePredmety.typ;

-- Ktere typy stop jsou zachytnutelne detektory?
SELECT typ AS nazevStopy
FROM TypyStop
JOIN StopyZachytnutelneDetektory ON TypyStop.idTypu = StopyZachytnutelneDetektory.idTypu;

-- Spojeni 3 tabulek:
-- Kteri kouzelnici zachytili stopy svych vlastnich predmetu?
SELECT Kouzelnici.obcanskeJmeno AS jmenoKouzelnika
FROM ZachyceneStopy
JOIN Kouzelnici ON ZachyceneStopy.runoveJmenoKouzelnika = Kouzelnici.runoveJmeno
JOIN Vlastnictvi ON Kouzelnici.runoveJmeno = Vlastnictvi.runovejmenokouzelnika AND ZachyceneStopy.runovyKodPredmetu = Vlastnictvi.runovyKodPredmetu;

-- Pouziti GROUP BY a agregacni funkce:
-- Kteri kouzelnici vlastni 3 a vice predmetu a kolik jich tedy vlastni?
SELECT Kouzelnici.obcanskeJmeno, COUNT(Vlastnictvi.idVlastnictvi) AS pocetPredmetu
FROM Kouzelnici
INNER JOIN Vlastnictvi ON Vlastnictvi.runoveJmenoKouzelnika = Kouzelnici.runoveJmeno
GROUP BY Kouzelnici.obcanskeJmeno
HAVING COUNT(Vlastnictvi.idVlastnictvi) >= 3;

-- Ktere aktivni detektory zachytily vice jak 2 stopy predmetu a ktere predmety to byly?
SELECT Detektory.idDetektoru, Predmety.nazev
FROM Detektory
JOIN ZachyceneStopy ON Detektory.idDetektoru = ZachyceneStopy.idDetektoru
JOIN Predmety ON ZachyceneStopy.runovyKodPredmetu = Predmety.runovyKod
WHERE Detektory.stav = 'Active'
GROUP BY Detektory.idDetektoru, Predmety.nazev
HAVING COUNT(ZachyceneStopy.idZachyceni) >= 2;

-- Pouziti EXISTS:
-- Ktere vlastnene predmety nezanechaly doposud zadnou stopu?
SELECT Predmety.nazev AS nazevPredmetu
FROM Predmety
WHERE NOT EXISTS (
    SELECT *
    FROM ZachyceneStopy
    WHERE ZachyceneStopy.runovyKodPredmetu = Predmety.runovyKod
);

-- Pouziti vnoreneho IN:
-- Kteri kouzelnici z Brna uz se angazovali a zachytili alespon jednu stopu?
SELECT Kouzelnici.obcanskeJmeno AS jmenoKouzelnika, Kouzelnici.mesto
FROM Kouzelnici
WHERE Kouzelnici.runoveJmeno IN (
    SELECT ZachyceneStopy.runoveJmenoKouzelnika
    FROM ZachyceneStopy
) AND Kouzelnici.mesto = 'Brno';

-- Pouziti klauzule WITH a operator CASE:
-- Kazdemu evidovanemu kouzelnikovi priradi slovni ohodnoceni jeho kouzelnicke urovne.
WITH stupne_kouzelniku AS (
    SELECT
        runoveJmeno,
        obcanskeJmeno,
        kouzelnickaUroven,
        CASE
            WHEN kouzelnickaUroven <= 70 THEN 'Noob'
            WHEN kouzelnickaUroven <= 140 THEN 'Greenhorn'
            WHEN kouzelnickaUroven <= 211 THEN 'Arciwizard'
            ELSE 'Unknown'
        END AS nazev_urovne
    FROM
        Kouzelnici
)
SELECT
    runoveJmeno,
    obcanskeJmeno,
    nazev_urovne
FROM
    stupne_kouzelniku;

------------------------------------------------------------------

----------------------- TRIGGERS SHOWCASE ------------------------
-- Ukazka prvniho triggeru:
    -- Vypis obsahuje jeden zaznam s kouzelnikem "Merlin" a predmetem s ID, ktere odpovida "Magic sword".

-- Ukazka druheho triggeru:
    -- Vypis obsahuje 3x pouziti predmetu s runovym kodem 6 nejvyssi nebezpecnosti a 1x pouziti predmetu s runovym kodem 4 se zvysenou nebezpecnosti 9.
------------------------------------------------------------------

--------------------------- PROCEDURES ---------------------------
-- Procedura, ktera vypise pro jednotlive evidovane detektory procentualni zastoupeni stop jimi detekovanych z celkoveho poctu stop
CREATE OR REPLACE PROCEDURE pocet_stop_prumer_detektor
IS
    -- Kursor pro zjisteni poctu zachycenych stop jednotlivymi detektory
    CURSOR detector_cursor IS
        SELECT idDetektoru, COUNT(*) AS pocet_zachytu
        FROM ZachyceneStopy WHERE idDetektoru IS NOT NULL
        GROUP BY idDetektoru;
    -- Celkovy pocet zaznamu
    pocet_vsech_stop NUMBER;
    -- Unikatni identifikator detektoru
    detektor_id ZachyceneStopy.idDetektoru%TYPE;
    -- Pocet zachycenych stop
    pocet_stop NUMBER;
    -- Procentualni pocet zachyceni
    procento_zcelku NUMBER;
BEGIN
    -- Ziskani poctu vsech zaznamu v tabulce zachycenych stop
    SELECT COUNT(*) INTO pocet_vsech_stop FROM ZachyceneStopy;

    FOR detektor_info IN detector_cursor LOOP
        -- Nacteni udaju z konkretniho detektoru
        detektor_id := detektor_info.idDetektoru;
        pocet_stop  := detektor_info.pocet_zachytu;

        BEGIN
            -- Vypocet procentualniho zastoupeni zachyceni daneho detektoru z celkoveho poctu zachycenych stop
            procento_zcelku := ((pocet_stop / pocet_vsech_stop) * 100);
            DBMS_OUTPUT.PUT_LINE('Detektor ' || detektor_id || ' zachytil ' || TO_CHAR(procento_zcelku, '999.999') || '% vsech stop.');
        EXCEPTION WHEN ZERO_DIVIDE THEN
            BEGIN
                DBMS_OUTPUT.PUT_LINE('Zadne stopy dosud nebyly zachyceny');
                EXIT;
            END;
        END;
    END LOOP;
END pocet_stop_prumer_detektor;
/

-- Priklad spusteni:
BEGIN
    pocet_stop_prumer_detektor;
END;
/


-- Procedura, ktera validne provede prevod vlastnictvi predmetu mezi kouzelniky
CREATE OR REPLACE PROCEDURE prevod_vlastnictvi_predmetu(
    runovy_kod_predmetu INT,
    runove_jmeno_stareho_kouzelnika NVARCHAR2,
    runove_jmeno_noveho_kouzelnika NVARCHAR2,
    zpusob_ztraty_stareho_kouzelnika NVARCHAR2,
    zpusob_ziskani_noveho_kouzelnika NVARCHAR2
)
AS
    id_vlastnictvi_stareho_kouzelnika INT;
BEGIN
    -- ziskani id vlastnictvi predmetu stareho kouzelnika
    SELECT idVlastnictvi INTO id_vlastnictvi_stareho_kouzelnika
    FROM Vlastnictvi
    WHERE runovyKodPredmetu = runovy_kod_predmetu
    AND runoveJmenoKouzelnika = runove_jmeno_stareho_kouzelnika
    AND zpusobZtraty IS NULL;

    -- Odstraneni vlastnictvi od stareho kouzelnika
    UPDATE Vlastnictvi
    SET zpusobZtraty = zpusob_ztraty_stareho_kouzelnika
    WHERE runovyKodPredmetu = runovy_kod_predmetu
    AND runoveJmenoKouzelnika = runove_jmeno_stareho_kouzelnika
    AND zpusobZtraty IS NULL;

    -- Pridani vlastnictvi novemu kouzelnikovi
    INSERT INTO Vlastnictvi (zpusobZiskani               , runovyKodPredmetu  , runoveJmenoKouzelnika)
    VALUES              (zpusob_ziskani_noveho_kouzelnika, runovy_kod_predmetu, runove_jmeno_noveho_kouzelnika);

    DBMS_OUTPUT.PUT_LINE('Predmet s runovym kodem "' || runovy_kod_predmetu || '" byl presunut z vlastnictvi kouzelnika "' || runove_jmeno_stareho_kouzelnika || '" do vlastnictvi kouzelnika "' || runove_jmeno_noveho_kouzelnika || '".');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Chyba pri prevodu vlastnictvi predmetu s runovym kodem "' || runovy_kod_predmetu || '" z vlastnictvi kouzelnika "' || runove_jmeno_stareho_kouzelnika || '" do vlastnictvi kouzelnika "' || runove_jmeno_noveho_kouzelnika || '".');
END prevod_vlastnictvi_predmetu;
/

-- Priklad spusteni:
BEGIN
    prevod_vlastnictvi_predmetu(1, 'Merlin', 'Gandalf', 'Prevod predmetu', 'Prevod predmetu');
END;
/


------------------------------------------------------------------

------------------------ MATERIALIZED VIEW -----------------------
-- Materializovany pohled na vsechny zachycene predmety a prumerny pocet obehu Jupiteru ve kterem byly zachyceny
CREATE MATERIALIZED VIEW zachycene_stopy_avg_jupiter
AS
SELECT
    runovyKodPredmetu,
    COUNT(*) AS pocet_zachyceni,
    AVG(pocetObehuJupiteru) AS prumerny_pocet_obehu_jupiteru
FROM ZachyceneStopy
GROUP BY runovyKodPredmetu;

-- Ukazka prace s materializovanym pohledem:
    -- Zobrazeni materializovaneho pohledu
    SELECT * FROM zachycene_stopy_avg_jupiter;

    -- Aktualizace hodnot v materializovanem pohledu
    -- -> Pridani nove polozky do tabulky, ze ktere materializovany pohled vychazi (toto alespon vyvola prvni trigger)
    INSERT INTO ZachyceneStopy (poziceSaturnu, poziceJupiteru, pocetObehuJupiteru, mesicniFaze  , runoveJmenoKouzelnika, idDetektoru, idTypu, runovyKodPredmetu)
        VALUES                 (24           , 11            , 4                 , 'prvni ctvrt', 'Gandalf'            , 5          , 2     , 6);
    -- -> Opetovne zobrazeni materializovaneho pohledu: data v materializovanem pohledu jsou nemenna
    SELECT * FROM zachycene_stopy_avg_jupiter;

------------------------------------------------------------------

---------------------- INDEX + EXPLAIN PLAN ----------------------

-- vytvoreni indexu pro vyhledavani zachycenych stop podle runoveho jmena kouzelnika
CREATE INDEX index_zachycenestopy_kouzelnik ON ZachyceneStopy(runoveJmenoKouzelnika);

EXPLAIN PLAN FOR
    SELECT Kouzelnici.runoveJmeno, COUNT(ZachyceneStopy.idZachyceni) AS pocet_zachyceni
    FROM Kouzelnici
    LEFT JOIN ZachyceneStopy ON Kouzelnici.runoveJmeno = ZachyceneStopy.runoveJmenoKouzelnika
    GROUP BY Kouzelnici.runoveJmeno;

-- vypis planu
SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY);

------------------------------------------------------------------

-------------------------- GRANT ACCESS --------------------------
GRANT ALL ON ZachyceneStopy              TO xjanst02;
GRANT ALL ON StopyZachytnutelneDetektory TO xjanst02;
GRANT ALL ON Detektory                   TO xjanst02;
GRANT ALL ON StopyKouzelnychPredmetu     TO xjanst02;
GRANT ALL ON TypyStop                    TO xjanst02;
GRANT ALL ON Vlastnictvi                 TO xjanst02;
GRANT ALL ON KouzelnePredmety            TO xjanst02;
GRANT ALL ON MudlovskePredmety           TO xjanst02;
GRANT ALL ON Predmety                    TO xjanst02;
GRANT ALL ON Kouzelnici                  TO xjanst02;
-- Pristup k materializovanemu pohledu
GRANT ALL ON zachycene_stopy_avg_jupiter TO xjanst02;

-- Pristup ke spousteni procedur
GRANT EXECUTE ON pocet_stop_prumer_detektor TO xjanst02;
GRANT EXECUTE ON prevod_vlastnictvi_predmetu TO xjanst02;

------------------------------------------------------------------
